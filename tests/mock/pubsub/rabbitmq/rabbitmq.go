// Code generated by MockGen. DO NOT EDIT.
// Source: ./pubsub/rabbitmq/rabbitmq.go
//
// Generated by this command:
//
//	mockgen -source ./pubsub/rabbitmq/rabbitmq.go -destination ./tests/mock/pubsub/rabbitmq/rabbitmq.go
//

// Package mock_rabbitmq is a generated GoMock package.
package mock_rabbitmq

import (
	context "context"
	reflect "reflect"

	amqp091 "github.com/rabbitmq/amqp091-go"
	rabbitmq "github.com/reyhanmichiels/go-pkg/v2/pubsub/rabbitmq"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// BindQueue mocks base method.
func (m *MockInterface) BindQueue(queueName, exchangeName, routingKey string, noWait bool, args amqp091.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindQueue", queueName, exchangeName, routingKey, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindQueue indicates an expected call of BindQueue.
func (mr *MockInterfaceMockRecorder) BindQueue(queueName, exchangeName, routingKey, noWait, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindQueue", reflect.TypeOf((*MockInterface)(nil).BindQueue), queueName, exchangeName, routingKey, noWait, args)
}

// CreateExchange mocks base method.
func (m *MockInterface) CreateExchange(name string, kind rabbitmq.ExchangeType, durable, autoDelete, internal, noWait bool, args amqp091.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExchange", name, kind, durable, autoDelete, internal, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExchange indicates an expected call of CreateExchange.
func (mr *MockInterfaceMockRecorder) CreateExchange(name, kind, durable, autoDelete, internal, noWait, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExchange", reflect.TypeOf((*MockInterface)(nil).CreateExchange), name, kind, durable, autoDelete, internal, noWait, args)
}

// CreateQueue mocks base method.
func (m *MockInterface) CreateQueue(name string, durable, autoDelete, exclusive, noWait bool, args amqp091.Table) (amqp091.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueue", name, durable, autoDelete, exclusive, noWait, args)
	ret0, _ := ret[0].(amqp091.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQueue indicates an expected call of CreateQueue.
func (mr *MockInterfaceMockRecorder) CreateQueue(name, durable, autoDelete, exclusive, noWait, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueue", reflect.TypeOf((*MockInterface)(nil).CreateQueue), name, durable, autoDelete, exclusive, noWait, args)
}

// MonitorConnection mocks base method.
func (m *MockInterface) MonitorConnection() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MonitorConnection")
}

// MonitorConnection indicates an expected call of MonitorConnection.
func (mr *MockInterfaceMockRecorder) MonitorConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorConnection", reflect.TypeOf((*MockInterface)(nil).MonitorConnection))
}

// Publish mocks base method.
func (m *MockInterface) Publish(ctx context.Context, exchangeName, routingKey, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, exchangeName, routingKey, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockInterfaceMockRecorder) Publish(ctx, exchangeName, routingKey, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockInterface)(nil).Publish), ctx, exchangeName, routingKey, body)
}

// Stop mocks base method.
func (m *MockInterface) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockInterface)(nil).Stop))
}

// Subscribe mocks base method.
func (m *MockInterface) Subscribe(ctx context.Context, queueName string, handler rabbitmq.MessageHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", ctx, queueName, handler)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockInterfaceMockRecorder) Subscribe(ctx, queueName, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockInterface)(nil).Subscribe), ctx, queueName, handler)
}
